#pragma once
#include "precompile.hpp"

class winsql {
 public:
  winsql(int lines, int cols, int y, int x)
    :_lines(lines), _cols(cols), _y(y), _x(x){
    _pwin = newwin(lines, cols, y, x);
    wborder(_pwin, 0, 0, 0, 0, 0, 0, 0, 0);
    wrefresh(_pwin);
    refresh();
  }

  void text_out(MYSQL_RES *results) {
    assert(results);
    int num_fields = mysql_num_fields(results);

    MYSQL_ROW row;
    // todo control output so that it does not overwrite border
    // also tokenize the line to put one word at a time, so that
    // words do not split between lines.
    // select t, b, c, v from bible.t_kjv where between...
    wmove(_pwin, 1, 1);
    while ((row = mysql_fetch_row(results)))
      for (int i = 0; i < num_fields; i++) {
        waddstr(_pwin, row[i]);
        waddstr(_pwin, "  ");
      }

    puts("\n");
    wrefresh(_pwin);
    refresh();
  }
private:
  WINDOW * _pwin=NULL;
  int _lines = 0;
  int _cols = 0;
  int _y = 0;
  int _x = 0;
};

class wininput {
 public:
  wininput(int lines, int cols, int y, int x)
    : _lines(lines), _cols(cols), _y(y), _x(x) {
    _pwin = newwin(lines, cols, y, x);
    wborder(_pwin, 0, 0, 0, 0, 0, 0, 0, 0);
    wmove(_pwin, _y + 1, _x + 1);
    wrefresh(_pwin);
    refresh();
  }
  int getcmd(char *str, int n) {
    int ret = wgetnstr(_pwin, str, n);
    wmove(_pwin, _y + 1, _x + 1);
    return ret;
  }
private:
  WINDOW * _pwin=NULL;
  int _lines = 0;
  int _cols = 0;
  int _y = 0;
  int _x = 0;
};
